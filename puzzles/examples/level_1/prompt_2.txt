Below is a puzzle involving 24 input buffers and their transformed outputs.
Each buffer is exactly 64 bytes, shown in hex.

Your task: Figure out the logic of the transformation used to go from the INPUT to the OUTPUT.
Then, provide a Python function that, given any new 64-byte buffer, will produce the correct transformed output.

Here are the 24 input (SRC) buffers in hex (one line per buffer): 20 
INPUT #01: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
INPUT #02: ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
INPUT #03: 01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
INPUT #04: 02000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
INPUT #05: 80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
INPUT #06: aa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
INPUT #07: 00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
INPUT #08: f0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
INPUT #09: 0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
INPUT #10: 55ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
INPUT #11: 000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f
INPUT #12: fffefdfcfbfaf9f8f7f6f5f4f3f2f1f0efeeedecebeae9e8e7e6e5e4e3e2e1e0dfdedddcdbdad9d8d7d6d5d4d3d2d1d0cfcecdcccbcac9c8c7c6c5c4c3c2c1c0
INPUT #13: aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55
INPUT #14: 55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa55aa
INPUT #15: f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0
INPUT #16: 0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f
INPUT #17: 01010101010101010202020202020202040404040404040408080808080808081010101010101010202020202020202040404040404040408080808080808080
INPUT #18: 01010101020202020202020203030303040404040505050508080808090909090101010102020202020202020303030304040404050505050808080809090909
INPUT #19: 0102040810204080010204081020408001020408102040800102040810204080fefdfbf7efdfbf7ffefdfbf7efdfbf7ffefdfbf7efdfbf7ffefdfbf7efdfbf7f
INPUT #20: 48656c6c6f2c20576f726c64212048656c6c6f2c20576f726c64212048656c6c6f2c20576f726c64212048656c6c6f2c20576f726c64212048656c6c6f2c2057
INPUT #21: 4c6f72656d20697073756d20646f6c6f722073697420616d65742c20636f6e73656374657475722061646970697363696e6720656c69742c2073656420646f20
INPUT #22: 0101020305080d1522375990e97962db3d18556dc22ff12011314273b528dd05e2e7c9b07929a2cb6d38a5dd825fe140216182e36548adf5a29739d009d9e2bb
INPUT #23: 789b34caf54f2e220acd941e71b88d5836866d0d858b63549e94be2cacc67f5b7ef28f2d9903959f63d3d893dce752779c84162917ec8ff1af4a6422d367e18d
INPUT #24: c5d71484f8cf9bf4b76f47904730804b9e3225a9f133b5dea168f4e2851f072fcc00fcaa7ca62061717a48e52e29a3fa379a953faa6893e32ec5a27b945e605f

And here are the corresponding transformed outputs (DST) in hex:
OUTPUT #01: 0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b
OUTPUT #02: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
OUTPUT #03: 0c0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b
OUTPUT #04: 0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b
OUTPUT #05: 8b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b
OUTPUT #06: ab0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b
OUTPUT #07: 0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
OUTPUT #08: fb000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
OUTPUT #09: 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
OUTPUT #10: 60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
OUTPUT #11: 0b0c0b0c0f100f100b0c0b0c0f100f101b1c1b1c1f201f201b1c1b1c1f201f202b2c2b2c2f302f302b2c2b2c2f302f303b3c3b3c3f403f403b3c3b3c3f403f40
OUTPUT #12: 00ff00fffcfbfcfb00ff00fffcfbfcfbf0eff0efecebecebf0eff0efecebecebe0dfe0dfdcdbdcdbe0dfe0dfdcdbdcdbd0cfd0cfcccbcccbd0cfd0cfcccbcccb
OUTPUT #13: ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60
OUTPUT #14: 60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab60ab
OUTPUT #15: fbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfbfb
OUTPUT #16: 10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010
OUTPUT #17: 0c0c0c0c0c0c0c0c0b0b0b0b0b0b0b0b0f0f0f0f0f0f0f0f0b0b0b0b0b0b0b0b1b1b1b1b1b1b1b1b2b2b2b2b2b2b2b2b4b4b4b4b4b4b4b4b8b8b8b8b8b8b8b8b
OUTPUT #18: 0c0c0c0c0b0b0b0b0b0b0b0b0c0c0c0c0f0f0f0f101010100b0b0b0b0c0c0c0c0c0c0c0c0b0b0b0b0b0b0b0b0c0c0c0c0f0f0f0f101010100b0b0b0b0c0c0c0c
OUTPUT #19: 0c0b0f0b1b2b4b8b0c0b0f0b1b2b4b8b0c0b0f0b1b2b4b8b0c0b0f0b1b2b4b8bff00fc00f0e0c080ff00fc00f0e0c080ff00fc00f0e0c080ff00fc00f0e0c080
OUTPUT #20: 4b706f6f702f2b60707b6f6f2c2b4b706f6f702f2b60707b6f6f2c2b4b706f6f702f2b60707b6f6f2c2b4b706f6f702f2b60707b6f6f2c2b4b706f6f702f2b60
OUTPUT #21: 4f707b70702b6c7b7c80702b6f706f707b2b7c6c7f2b6c70707f2f2b6c706f7c706c7f707f807b2b6c6f6c7b6c7c6c6c6f702b706f6c7f2f2b7c706f2b6f702b
OUTPUT #22: 0c0c0b0c100b10202b405c9bec7c6bdc401b6070cb30fc2b1c3c4b7cc02be010ebf0ccbb7c2cabcc703bb0e08b60ec4b2c6c8bec704bb000aba03cdb0cdcebbc
OUTPUT #23: 7b9c3fcb00502f2b0bd09f1f7cbb905b3f8f7010908c6c5f9f9fbf2fafcf805c7ffb90309c0ca0a06cdcdb9cdff05b809f8f1f2c20ef90fcb04b6f2bdc70ec90
OUTPUT #24: d0e01f8ffbd09cffc070509b503b8b4c9f3b30acfc3cc0dfac6bffeb90201030cf0bffab7faf2b6c7c7b4bf02f2cacfb409ba040ab6b9cec2fd0ab7c9f5f6b60

Instructions:
- Return just your best possible approximation as a small python function that takes a 64 byte array as input, and returns the 64 byte array as output. 
- Remember, the transformation is the same for all 24 buffers.
- The function will be scored by the number of buffers that are correctly transformed (as shown in the 24 outputs).
- And it also will be tested on another set of 24 hidden input buffers not shown in the prompt. 
- Do not include anything else in your response, no introduction text or explanations.

Example Output:
def transform(data: bytes) -> bytes:
   # Transform logic
   return bytes